import { useState, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useLocation, Link } from "wouter";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import ProfilePhotoButton, { ProfilePhotoEditButton } from "./profile-photo-button";
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  Pencil, 
  Eye, 
  X, 
  Settings, 
  BookType, 
  CalendarHeart, 
  MapPin, 
  UserCheck, 
  Gift,
  Heart,
  Camera,
  Edit,
  Sparkles,
  MessageCircle,
  Music,
  Film,
  Book,
  Coffee,
  Loader2,
  Cross,
  ArrowLeft,
  Check,
  HeartPulse,
  UserPlus
} from "lucide-react";
import { useLanguage } from "@/hooks/use-language";
import { allInterests } from "@/lib/ghanaian-interests";
import { useUserInterests } from "@/hooks/use-user-interests";
import { calculateAge } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";
import { motion } from "framer-motion";
import { User } from "@shared/schema";
import { ReligionSelect } from "@/components/ui/religion-select";
import { getReligionDisplayName } from "@/lib/religions";
import { CityInput } from "@/components/ui/city-input";
import { InterestsSection } from "@/components/interests/interests-section";
import { TribeSelect } from "@/components/ui/tribe-select";
import { GHANA_TRIBES } from "@/lib/tribes";

interface MeetProfileProps {
  user: User;
}

export default function MeetProfile({ user }: MeetProfileProps) {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const { translate } = useLanguage();
  const [photoExpanded, setPhotoExpanded] = useState(false);
  const [editField, setEditField] = useState<string | null>(null);
  const [showPreview, setShowPreview] = useState(false);

  // Fields state
  const [residenceValue, setResidenceValue] = useState(user.location || "");
  const [professionValue, setProfessionValue] = useState(user.profession || "");
  const [religionValue, setReligionValue] = useState(user.religion || "");
  const [bioValue, setBioValue] = useState(user.bio || "");
  const [relationshipGoalValue, setRelationshipGoalValue] = useState(
    user.relationshipGoal || "",
  );
  const [showProfilePhotoValue, setShowProfilePhotoValue] = useState(
    user.showProfilePhoto !== false // Default to true if not set
  );
  
  // Avatar toggle and loading state - initialize to false if no avatar URL exists
  const [avatarToggleValue, setAvatarToggleValue] = useState(user.showAsAvatar === true && !!user.avatarUrl);
  const [generatingAvatar, setGeneratingAvatar] = useState(false);
  const [showRegenerateDialog, setShowRegenerateDialog] = useState(false);
  
  // Tribe state - create an array with both primary and secondary tribes if they exist
  const [tribeValues, setTribeValues] = useState<string[]>(() => {
    const tribes = [];
    if (user.ethnicity) tribes.push(user.ethnicity);
    if (user.secondaryTribe) tribes.push(user.secondaryTribe);
    return tribes;
  });
  
  // Interests state - convert from array or initialize empty with defensive parsing
  const [userInterests, setUserInterests] = useState<string[]>(() => {
    try {
      if (!user.interests) return [];
      if (Array.isArray(user.interests)) return user.interests;
      if (typeof user.interests === 'string') {
        return JSON.parse(user.interests || '[]');
      }
      return [];
    } catch (e) {
      console.error('Failed to parse user interests:', e);
      return [];
    }
  });
  
  // Fetch visible user interests (for SwipeCard preview)
  const { 
    visibleInterestStrings = [], 
    allInterestStrings = [],
    isLoading: interestsLoading 
  } = useUserInterests(user.id);

  // State for field visibility - default to off if field not specified
  const [fieldVisibility, setFieldVisibility] = useState({
    residence: !!user.location,
    tribe: !!user.ethnicity,
    profession: !!user.profession,
    religion: !!user.religion,
    bio: !!user.bio,
    relationshipGoal: !!user.relationshipGoal,
    interests: userInterests.length > 0,
  });

  // Fetch user photos
  const { data: userPhotos, isLoading: loadingPhotos } = useQuery<
    Array<{ id: number; photoUrl: string; isPrimary: boolean }>
  >({
    queryKey: [`/api/photos/${user?.id}`],
    enabled: !!user,
    staleTime: 5 * 60 * 1000, // Cache for 5 minutes
    gcTime: 10 * 60 * 1000, // Keep in cache for 10 minutes (v5 uses gcTime instead of cacheTime)
  });



  // File upload reference
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Enhanced file selection handler with comprehensive validation and performance optimization
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    
    // Validate file type more thoroughly
    const validImageTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif', 'image/heic', 'image/heif'];
    if (!validImageTypes.includes(file.type)) {
      toast({
        title: "Invalid file type",
        description: "Please select a valid image file (JPEG, PNG, WebP, GIF)",
        variant: "destructive",
      });
      // Reset file input
      if (event.target) event.target.value = '';
      return;
    }

    // File size validation removed - now accepting files of any size
    
    // Validate image dimensions and quality by loading it (prevents corrupted images)
    const validateImageAndUpload = (fileUrl: string) => {
      // Create a loading toast for the validation step
      const { id: validationToastId, dismiss: dismissValidationToast } = toast({
        title: "Validating image",
        description: "Checking image dimensions and quality...",
        duration: 30000, // Long duration since we'll manually dismiss
      });
      
      const img = new Image();
      
      // Original onload handler (will be properly set after timeout setup)
      const handleImageLoad = () => {
        // Dismiss the validation toast
        dismissValidationToast();
        
        // Valid image, proceed with upload checks
        
        // Check if image is too small
        if (img.width < 200 || img.height < 200) {
          toast({
            title: "Image too small",
            description: "Please select an image that is at least 200x200 pixels.",
            variant: "destructive",
          });
          // Reset file input
          if (event.target) event.target.value = '';
          return;
        }
        
        // Check aspect ratio - warn if image is very tall or very wide
        const aspectRatio = img.width / img.height;
        if (aspectRatio < 0.5 || aspectRatio > 2) {
          toast({
            title: "Unusual aspect ratio",
            description: "For best results, use images with a more balanced width and height.",
            variant: "default", // Explicitly set variant to default (the only options are default or destructive)
          });
          // Continue anyway as this is just a warning
        }
        
        // Check if we already have maximum photos (8)
        if (userPhotos && userPhotos.length >= 8) {
          toast({
            title: "Maximum photos reached",
            description: "You can only have 8 photos. Please delete some photos before adding more.",
            variant: "destructive",
          });
          // Reset file input
          if (event.target) event.target.value = '';
          return;
        }
        
        // Image is valid, create optimistic toast that will be auto-dismissed
        const { id: uploadingToastId, dismiss: dismissUploadingToast } = toast({
          title: "Uploading photo",
          description: "Your photo is being uploaded...",
          duration: 60000, // Long enough to handle slow uploads
        });
        
        // Process in batches to avoid UI freezing
        setTimeout(() => {
          // Call mutation
          addPhotoMutation.mutate(fileUrl);
          
          // Handle toast dismissal separately with a delay
          setTimeout(() => {
            dismissUploadingToast();
          }, 2000); // Dismiss after a reasonable time
        }, 10);
      };
      
      // Original error handler (will be properly set after timeout setup)
      const handleImageError = () => {
        // Dismiss the validation toast
        dismissValidationToast();
        
        toast({
          title: "Invalid image",
          description: "The selected file appears to be corrupted or is not a valid image.",
          variant: "destructive",
        });
        // Reset file input
        if (event.target) event.target.value = '';
      };
      
      // Set a timeout for loading failure
      const imageLoadTimeout = setTimeout(() => {
        dismissValidationToast();
        
        toast({
          title: "Image load timeout",
          description: "The image took too long to load. It may be too large or corrupted.",
          variant: "destructive",
        });
        
        // Reset file input
        if (event.target) event.target.value = '';
        
        // Cancel the image load
        img.src = '';
      }, 20000); // 20 second timeout
      
      // Set up the event handlers correctly
      img.onload = () => {
        clearTimeout(imageLoadTimeout);
        handleImageLoad();
      };
      
      img.onerror = () => {
        clearTimeout(imageLoadTimeout);
        handleImageError();
      };
      
      // Start loading the image
      img.src = fileUrl;
    };

    // Track loading state for better UI feedback
    const { dismiss: dismissLoadingToast } = toast({
      title: "Processing photo",
      description: "Your photo is being prepared for upload...",
      duration: 60000, // Long duration since we'll manually dismiss on success/error
    });

    // Read the file as data URL with enhanced error handling
    const reader = new FileReader();
    
    reader.onload = (e) => {
      const photoUrl = e.target?.result as string;
      
      // Dismiss the loading toast since processing is done
      dismissLoadingToast();
      
      if (photoUrl) {
        // Check image data URL for validity
        if (!photoUrl.startsWith('data:image/')) {
          toast({
            title: "Invalid image format",
            description: "The file appears to be corrupted or is not a valid image.",
            variant: "destructive",
          });
          // Reset file input
          if (event.target) event.target.value = '';
          return;
        }
        
        // Proceed with validation and upload
        validateImageAndUpload(photoUrl);
      } else {
        toast({
          title: "Empty image data",
          description: "The file couldn't be read correctly. Please try another image.",
          variant: "destructive",
        });
        // Reset file input
        if (event.target) event.target.value = '';
      }
    };
    
    reader.onerror = () => {
      // Dismiss the loading toast since processing failed
      dismissLoadingToast();
      
      toast({
        title: "Upload failed",
        description: "Failed to process image. The file may be corrupted. Please try another image.",
        variant: "destructive",
      });
      
      // Reset file input
      if (event.target) event.target.value = '';
    };
    
    reader.readAsDataURL(file);
  };

  // Add photo mutation (with performance optimization)
  const addPhotoMutation = useMutation({
    mutationFn: async (photoUrl: string) => {
      // Implement optimistic UI update to show progress immediately
      const optimisticPhoto = {
        id: Date.now(), // Temporary ID
        userId: user.id,
        photoUrl: photoUrl,
        isPrimary: !userPhotos || userPhotos.length === 0,
        createdAt: new Date().toISOString(),
      };
      
      // Update UI immediately with optimistic data
      queryClient.setQueryData([`/api/photos/${user?.id}`], (old: any) => {
        return [...(old || []), optimisticPhoto];
      });
      
      try {
        // Actual API request (can happen in background)
        const res = await apiRequest("/api/photos", {
          method: "POST",
          data: {
            photoUrl,
            isPrimary: !userPhotos || userPhotos.length === 0, // Make first photo primary
          }
        });
        
        // Check if response is valid JSON before parsing
        const contentType = res.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          // Success toast
          toast({
            title: translate('toast.photoAdded'),
            description: translate('toast.photoAddedDescription'),
          });
          
          return await res.json();
        } else {
          // Handle non-JSON response
          const text = await res.text();
          if (text.includes("<!DOCTYPE html>")) {
            throw new Error("Server error. Please try again later.");
          }
          
          // Success toast for non-JSON success response
          toast({
            title: translate('toast.photoAdded'),
            description: translate('toast.photoAddedDescription'),
          });
          
          return { success: true };
        }
      } catch (error) {
        // Remove optimistic update on error
        queryClient.setQueryData([`/api/photos/${user?.id}`], (old: any) => {
          return (old || []).filter((photo: any) => photo.id !== optimisticPhoto.id);
        });
        
        // Show error toast
        toast({
          title: translate('toast.errorAddingPhoto'),
          description: error instanceof Error ? error.message : translate('toast.unknownError'),
          variant: "destructive",
        });
        
        throw error;
      } finally {
        // Reset file input
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
      }
    },
    onSuccess: () => {
      // No need to invalidate query as we're already using optimistic updates
      // Just ensure the server data is correctly synced
      setTimeout(() => {
        queryClient.invalidateQueries({ queryKey: [`/api/photos/${user?.id}`] });
      }, 500); // Small delay to avoid UI flicker
    },
  });

  // Delete photo mutation (with true optimistic update)
  const deletePhotoMutation = useMutation({
    mutationFn: async (photoId: number) => {
      // Store the original photo list for potential recovery
      const originalPhotos = queryClient.getQueryData([`/api/photos/${user?.id}`]);
      
      // Apply optimistic update immediately - remove the photo from UI
      queryClient.setQueryData([`/api/photos/${user?.id}`], (old: any) => {
        return (old || []).filter((photo: any) => photo.id !== photoId);
      });
      
      try {
        // Show quick toast without blocking UI
        toast({
          title: "Deleting photo",
          description: translate("profile.removingPhoto"),
          duration: 2000,
        });
        
        // Make the API request
        const res = await apiRequest(`/api/photos/${photoId}`, { method: "DELETE" });
        
        // Check for valid response
        const contentType = res.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          // Show success toast
          toast({
            title: translate('toast.photoDeleted'),
            description: translate('toast.photoDeletedDescription'),
          });
          
          return await res.json();
        } else {
          // Handle non-JSON response
          const text = await res.text();
          if (text.includes("<!DOCTYPE html>")) {
            throw new Error("Server error. Please try again later.");
          }
          
          // Show success toast
          toast({
            title: translate('toast.photoDeleted'),
            description: translate('toast.photoDeletedDescription'),
          });
          
          return photoId;
        }
      } catch (error) {
        // Restore original data on error
        queryClient.setQueryData([`/api/photos/${user?.id}`], originalPhotos);
        
        // Show error toast
        toast({
          title: translate('toast.errorDeletingPhoto'),
          description: error instanceof Error ? error.message : translate('toast.unknownError'),
          variant: "destructive",
        });
        throw error;
      }
    },
    onSuccess: (deletedPhotoId) => {
      // Check if the deleted photo was primary
      const wasPrimary = userPhotos?.find(photo => photo.id === deletedPhotoId)?.isPrimary;
      
      // If deleted photo was primary, need to update user data as well
      if (wasPrimary) {
        queryClient.invalidateQueries({ queryKey: ["/api/user"] });
      }
      
      // Final sync with server data (with delay to avoid UI flicker)
      setTimeout(() => {
        queryClient.invalidateQueries({ queryKey: [`/api/photos/${user?.id}`] });
      }, 500);
    },
    onError: () => {
      // Error is already handled in the mutation function
    },
  });

  // Set primary photo mutation (with true optimistic updates)
  const setPrimaryPhotoMutation = useMutation({
    mutationFn: async (photoId: number) => {
      // Save original data for potential recovery
      const originalPhotos = queryClient.getQueryData([`/api/photos/${user?.id}`]);
      const originalUser = queryClient.getQueryData(["/api/user"]);
      
      // Create optimistic updated photo array
      if (userPhotos) {
        // Get the URL of the new primary photo
        const newPrimaryPhotoUrl = userPhotos.find(photo => photo.id === photoId)?.photoUrl;
        
        // Update photo array optimistically
        const updatedPhotos = userPhotos.map(photo => ({
          ...photo,
          isPrimary: photo.id === photoId
        }));
        
        // Apply immediate UI updates
        queryClient.setQueryData([`/api/photos/${user?.id}`], updatedPhotos);
        
        // Also update user data with new primary photo
        if (newPrimaryPhotoUrl && originalUser) {
          queryClient.setQueryData(["/api/user"], {
            ...originalUser,
            photoUrl: newPrimaryPhotoUrl
          });
        }
      }
      
      // Show quick processing toast
      toast({
        title: translate('toast.updatingPrimaryPhoto'),
        description: translate('toast.settingProfilePicture'),
        duration: 2000,
      });
      
      try {
        // Make the actual API request
        const res = await apiRequest(`/api/photos/${photoId}/primary`, { method: "PATCH" });
        
        // Check if response is valid JSON before parsing
        const contentType = res.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          // Show success toast
          toast({
            title: translate('toast.primaryPhotoUpdated'),
            description: translate('toast.profilePictureUpdated'),
          });
          
          return await res.json();
        } else {
          // Handle non-JSON response
          const text = await res.text();
          if (text.includes("<!DOCTYPE html>")) {
            throw new Error("Server error. Please try again later.");
          }
          
          // Show success toast
          toast({
            title: translate('toast.primaryPhotoUpdated'),
            description: translate('toast.profilePictureUpdated'),
          });
          
          return { success: true };
        }
      } catch (error) {
        // Restore original data on error
        queryClient.setQueryData([`/api/photos/${user?.id}`], originalPhotos);
        queryClient.setQueryData(["/api/user"], originalUser);
        
        // Show error toast
        toast({
          title: translate('toast.errorUpdatingPrimaryPhoto'),
          description: error instanceof Error ? error.message : translate('toast.unknownError'),
          variant: "destructive",
        });
        throw error;
      }
    },
    onSuccess: () => {
      // Final sync with server data (with delay to avoid UI flicker)
      setTimeout(() => {
        queryClient.invalidateQueries({ queryKey: [`/api/photos/${user?.id}`] });
        queryClient.invalidateQueries({ queryKey: ["/api/user"] });
      }, 500);
    },
    onError: () => {
      // Error is already handled in the mutation function
    },
  });



  const handleEditProfile = () => {
    setLocation("/profile-creation");
  };

  const handleSettings = () => {
    setLocation("/settings");
  };

  // Helper function to generate random integer in a range (used for compatibility score)
  const getRandomInt = (min: number, max: number) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  // Helper function to calculate age from date of birth
  const calculateAge = (dateOfBirth: string | Date | null | undefined) => {
    if (!dateOfBirth) return 0;
    const birthDate =
      dateOfBirth instanceof Date ? dateOfBirth : new Date(dateOfBirth);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    if (
      monthDiff < 0 ||
      (monthDiff === 0 && today.getDate() < birthDate.getDate())
    ) {
      age--;
    }
    return age;
  };

  // Toggle edit mode for a field

  // Avatar-related functionality has been removed
  
  const toggleEditMode = (fieldName: string) => {
    setEditField(editField === fieldName ? null : fieldName);
  };

  // Toggle visibility for a field
  const toggleVisibility = (fieldName: string) => {
    setFieldVisibility((prev) => ({
      ...prev,
      [fieldName]: !prev[fieldName as keyof typeof prev],
    }));
  };

  // Profile update mutation
  const updateProfileMutation = useMutation({
    mutationFn: async (data: Partial<any>) => {
      try {
        // First confirm user is authenticated
        const sessionCheck = await fetch("/api/user", {
          credentials: "include",
          headers: {
            "Cache-Control": "no-cache, no-store, must-revalidate",
            "Pragma": "no-cache"
          }
        });
        
        if (!sessionCheck.ok) {
          throw new Error("Session expired. Please refresh the page and try again.");
        }
        
        // Only update the specific field, not the entire profile
        const res = await apiRequest(`/api/profile/${user.id}`, { method: "PATCH", data });
        
        // Check if response is valid JSON before parsing
        const contentType = res.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          return await res.json();
        } else {
          // Handle non-JSON response
          const text = await res.text();
          if (text.includes("<!DOCTYPE html>")) {
            throw new Error("Server error. Please try again later.");
          }
          return { message: "Profile updated successfully" };
        }
      } catch (error) {
        console.error("Profile update error:", error);
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/user"] });
      toast({
        title: translate('toast.profileUpdated'),
        description: translate('toast.profileUpdatedDescription'),
      });
    },
    onError: (error: any) => {
      console.error("Profile update error:", error);
      toast({
        title: translate('toast.errorUpdatingProfile'),
        description: error?.message || "Unknown error updating profile",
        variant: "destructive",
      });
    },
  });

  // Toggle an interest in the selection list
  const toggleInterest = (interest: string) => {
    if (userInterests.includes(interest)) {
      // Remove interest
      setUserInterests(userInterests.filter(i => i !== interest));
    } else {
      // Add interest
      setUserInterests([...userInterests, interest]);
    }
  };

  // Save edited field
  const saveField = (fieldName: string, forceClear = false) => {
    let value: string | null = "";
    let updateData: Partial<any> = {};

    // Check if we're explicitly clearing a field (trim returns empty string)
    // We need to detect this condition to set the correct flag
    let isClearing = forceClear; // Force clearing if requested

    switch (fieldName) {
      case "residence":
        if (forceClear) {
          setResidenceValue(""); // Immediately clear the input field
        }
        isClearing = forceClear || !residenceValue || residenceValue.trim() === "";
        value = isClearing ? null : residenceValue.trim();
        updateData = { location: value };
        break;
      case "profession":
        if (forceClear) {
          setProfessionValue(""); // Immediately clear the input field
        }
        isClearing = forceClear || !professionValue || professionValue.trim() === "";
        value = isClearing ? null : professionValue.trim();
        updateData = { profession: value };
        break;
      case "religion":
        if (forceClear) {
          setReligionValue(""); // Immediately clear the input field
        }
        isClearing = forceClear || !religionValue || religionValue.trim() === "";
        value = isClearing ? null : religionValue.trim();
        updateData = { religion: value };
        break;
      case "bio":
        if (forceClear) {
          setBioValue(""); // Immediately clear the input field
        }
        isClearing = forceClear || !bioValue || bioValue.trim() === "";
        value = isClearing ? null : bioValue.trim();
        updateData = { bio: value };
        break;
      case "relationshipGoal":
        if (forceClear) {
          setRelationshipGoalValue(""); // Immediately clear the input field
        }
        isClearing = forceClear || !relationshipGoalValue || relationshipGoalValue.trim() === "";
        value = isClearing ? null : relationshipGoalValue.trim();
        updateData = { relationshipGoal: value };
        break;
      case "interests":
        // Store interests as a JSON string in the database
        if (forceClear) {
          setUserInterests([]); // Immediately clear the interests
        }
        isClearing = forceClear || userInterests.length === 0;
        updateData = { 
          interests: userInterests.length > 0 ? JSON.stringify(userInterests) : null
        };
        break;
      case "tribe":
        // Update the primary and secondary tribes
        if (forceClear) {
          setTribeValues([]); // Immediately clear the tribes
        }
        isClearing = forceClear || (!tribeValues[0] || tribeValues[0].trim() === "");
        updateData = { 
          ethnicity: tribeValues[0]?.trim() || null,
          secondaryTribe: tribeValues[1]?.trim() || null
        };
        
        // Apply immediate UI update for tribes to improve responsiveness
        if (!isClearing) {
          toast({
            title: "Updating tribe",
            description: "Saving your tribe information...",
            duration: 2000,
          });
        }
        break;
    }
    
    // Add the clearing flag if we're explicitly setting empty fields to null
    if (isClearing) {
      console.log(`Clearing field ${fieldName} with null value`);
      updateData.clearingFields = true;
    }

    // Create optimistic update to apply instantly with type safety
    const optimisticUser = { ...user };
    
    // Type-safe approach to update fields
    if ('location' in updateData) optimisticUser.location = updateData.location;
    if ('profession' in updateData) optimisticUser.profession = updateData.profession;
    if ('religion' in updateData) optimisticUser.religion = updateData.religion;
    if ('bio' in updateData) optimisticUser.bio = updateData.bio;
    if ('ethnicity' in updateData) optimisticUser.ethnicity = updateData.ethnicity;
    if ('secondaryTribe' in updateData) optimisticUser.secondaryTribe = updateData.secondaryTribe;
    if ('relationshipGoal' in updateData) optimisticUser.relationshipGoal = updateData.relationshipGoal;
    if ('interests' in updateData) optimisticUser.interests = updateData.interests;
    
    // Update the user in the cache immediately for a responsive UI
    queryClient.setQueryData(["/api/user"], optimisticUser);
    
    console.log(`Optimistically updating ${fieldName} with data:`, updateData);

    // Update in database
    updateProfileMutation.mutate({
      ...updateData,
      // Also send visibility preferences
      visibilityPreferences: JSON.stringify(fieldVisibility),
    });

    // Close edit mode
    setEditField(null);
  };
  
  // Define interface for dating preferences based on the existing implementation
  interface DatingPreferences {
    ageRange?: [number, number];
    distance?: number;
    religion?: string[];
    religiousImportance?: number;
    educationLevel?: string[];
    hasChildren?: boolean | null;
    wantsChildren?: boolean | null;
    height?: [number, number]; // in cm
    tribes?: string[];
    lookingFor?: string; // relationship, casual, friendship, marriage
    dealBreakers?: string[];
    interests?: string[];
    bodyType?: string[];
    matchingPriorities?: string[]; // What's most important to them
  }
  
  // Extended User type that may contain dating preferences
  type ExtendedUser = User & {
    datingPreferences?: DatingPreferences;
    age?: number;
    phone?: string;
  };
  
  // Type guard for photo arrays to fix TypeScript errors
  const isPhotoArray = (data: any): data is Array<{ id: number; photoUrl: string; isPrimary: boolean }> => {
    return Array.isArray(data) && 
      (data.length === 0 || (data[0] && typeof data[0].id === 'number' && typeof data[0].photoUrl === 'string'));
  };
  
  // Helper function to safely parse JSON strings into arrays
  const safeParseJSON = (jsonString: string | null | undefined, defaultValue: any[] = []): any[] => {
    if (!jsonString) return defaultValue;
    
    try {
      const parsed = JSON.parse(jsonString);
      return Array.isArray(parsed) ? parsed : defaultValue;
    } catch (e) {
      console.error("Error parsing JSON:", e);
      return defaultValue;
    }
  };
  
  // Fetch user preferences directly to ensure accurate profile completion calculation
  const { data: userPreferences, isLoading: loadingPreferences } = useQuery({
    queryKey: [`/api/preferences/${user?.id}`],
    queryFn: async () => {
      if (!user?.id) return null;
      try {
        const res = await apiRequest(`/api/preferences/${user?.id}`, { method: "GET" });
        if (res.status === 404) {
          console.log("No dating preferences found for user");
          return null;
        }
        if (!res.ok) {
          throw new Error("Failed to fetch user preferences");
        }
        const data = await res.json();
        console.log("Fetched user preferences from API:", data);
        return data;
      } catch (error) {
        console.error("Error fetching user preferences:", error);
        return null;
      }
    },
    enabled: !!user?.id,
    staleTime: 5 * 60 * 1000, // Cache for 5 minutes
    gcTime: 10 * 60 * 1000, // Keep in cache for 10 minutes (v5 uses gcTime instead of cacheTime)
    retry: 1, // Only retry once on failure
    refetchOnWindowFocus: false // Don't refetch when window regains focus
  });
  
  // Combine user data with preferences into extended user
  const extendedUser: ExtendedUser = {
    ...user,
    // Map database preferences to frontend DatingPreferences format
    datingPreferences: userPreferences ? {
      // Map minAge/maxAge to ageRange
      ageRange: userPreferences.minAge && userPreferences.maxAge 
        ? [userPreferences.minAge, userPreferences.maxAge] as [number, number]
        : undefined,
      
      // Map minHeight/maxHeight to height
      height: userPreferences.minHeightPreference && userPreferences.maxHeightPreference
        ? [userPreferences.minHeightPreference, userPreferences.maxHeightPreference] as [number, number]
        : undefined,
      
      // Map direct fields
      distance: userPreferences.distancePreference,
      religiousImportance: userPreferences.religiousImportance,
      lookingFor: userPreferences.relationshipGoalPreference,
      
      // Parse boolean preferences from string representation
      hasChildren: userPreferences.hasChildrenPreference === 'true' 
        ? true 
        : userPreferences.hasChildrenPreference === 'false' 
          ? false 
          : null,
      
      wantsChildren: userPreferences.wantsChildrenPreference === 'true'
        ? true
        : userPreferences.wantsChildrenPreference === 'false'
          ? false
          : null,
      
      // Parse JSON strings into arrays
      religion: userPreferences.religionPreference ? safeParseJSON(userPreferences.religionPreference) : [],
      tribes: userPreferences.ethnicityPreference ? safeParseJSON(userPreferences.ethnicityPreference) : [],
      educationLevel: userPreferences.educationLevelPreference ? safeParseJSON(userPreferences.educationLevelPreference) : [],
      bodyType: userPreferences.bodyTypePreference ? safeParseJSON(userPreferences.bodyTypePreference) : [],
      dealBreakers: userPreferences.dealBreakers ? safeParseJSON(userPreferences.dealBreakers) : [],
      interests: userPreferences.interestPreferences ? safeParseJSON(userPreferences.interestPreferences) : [],
      matchingPriorities: userPreferences.matchingPriorities ? safeParseJSON(userPreferences.matchingPriorities) : [],
    } : undefined
  };
  
  // Fetch interests directly from the useUserInterests hook result
  const hasInterests = visibleInterestStrings.length > 0 || allInterestStrings.length > 0;

  // Define profile fields that show in the UI (including ethnicity but excluding secondaryTribe)
  const profileFields = [
    userPhotos && userPhotos.length > 0,        // Has photos
    !!user.fullName,                            // Name
    !!user.dateOfBirth,                         // Date of Birth
    !!user.phoneNumber,                         // Phone
    !!user.bio,                                 // Bio
    !!user.location,                            // Location/Residence
    !!user.profession,                          // Profession
    !!user.ethnicity,                           // Primary Tribe
    !!user.religion,                            // Religion
    !!user.relationshipGoal,                    // Relationship Goal
    hasInterests,                               // Has interests (using data from useUserInterests hook)
  ];
  
  // Define dating preference fields that show in the UI (excluding distance and lookingFor)
  const datingPreferenceFields = [
    !!extendedUser.datingPreferences?.ageRange,           // Age range preference
    !!extendedUser.datingPreferences?.height,             // Height preference
    !!extendedUser.datingPreferences?.religiousImportance !== undefined, // Religious importance
    !!extendedUser.datingPreferences?.religion?.length,    // Religion preference
    extendedUser.datingPreferences?.hasChildren !== undefined && extendedUser.datingPreferences?.hasChildren !== null,   // Has children preference
    extendedUser.datingPreferences?.wantsChildren !== undefined && extendedUser.datingPreferences?.wantsChildren !== null, // Wants children preference
    !!extendedUser.datingPreferences?.educationLevel?.length, // Education level
    !!extendedUser.datingPreferences?.dealBreakers?.length, // Deal breakers
    !!extendedUser.datingPreferences?.interests?.length,    // Interests preference
    !!extendedUser.datingPreferences?.bodyType?.length,     // Body type preference
    !!extendedUser.datingPreferences?.matchingPriorities?.length, // Matching priorities
  ];
  
  // Calculate profile completion percentage with improved accuracy
  const calculateProfileCompletionPercentage = (): number => {
    // Use interests data from useUserInterests hook
    const hasInterests = visibleInterestStrings.length > 0 || allInterestStrings.length > 0;

    // We're using the component-level profileFields and datingPreferenceFields here
    
    // Combine all fields into a single array
    const allFields = [...profileFields, ...datingPreferenceFields];
    
    // Count completed fields
    const completedFields = allFields.filter(Boolean).length;
    const totalFields = allFields.length;
    
    // Calculate simple percentage - number of filled fields divided by total number of fields
    const percentage = Math.round((completedFields / totalFields) * 100);
    
    // Return the calculated percentage based on completed fields
    return percentage;
  };
  
  // Calculate the profile completion percentage
  const profileCompletionPercentage = calculateProfileCompletionPercentage();
  
  // Get the appropriate color for the health bar
  const getHealthBarColor = (percent: number): string => {
    if (percent < 20) return '#cc0000';      // deep red
    if (percent < 40) return '#ff4500';      // red-orange
    if (percent < 60) return '#ffc107';      // yellow
    if (percent < 80) return '#90ee90';      // light green
    if (percent < 100) return '#32cd32';     // lime green
    return '#006400';                        // deep green
  };
  

  return (
    <div className="pb-0 relative">
      {/* Profile Header with gradient background */}
      <div className="w-full flex flex-col items-center relative">
        {/* Top gradient background */}
        <div className="relative w-full h-20">
          <div
            className="w-full h-full bg-gradient-to-r from-purple-600 to-pink-500"
            style={{
              backgroundImage: `url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23ffffff' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E")`,
              backgroundSize: "cover",
              backgroundPosition: "center",
            }}
          >
          </div>
          
          {/* Floating "Show Preview" button positioned closer to profile photo */}
          <div className="absolute bottom-6 right-4 z-40">
            <Button
              variant="outline"
              size="sm"
              className="flex items-center gap-1.5 border-2 border-pink-300 dark:border-pink-700 bg-white/95 hover:bg-white/100 dark:bg-gray-800/95 dark:hover:bg-gray-800 shadow-lg transition-colors pointer-events-auto rounded-full px-3"
              onClick={() => setShowPreview(!showPreview)}
            >
              {showPreview ? (
                <>
                  <X className="h-3.5 w-3.5 text-pink-500 dark:text-pink-400" />
                  <span className="text-xs font-medium text-purple-600 dark:text-purple-400">
                    {translate("profile.hidePreview")}
                  </span>
                </>
              ) : (
                <>
                  <span className="text-xs font-medium text-purple-600 dark:text-purple-400">
                    {translate("profile.showPreview")}
                  </span>
                  <Check className="h-3.5 w-3.5 ml-1 text-purple-500 dark:text-purple-400" />
                </>
              )}
            </Button>
          </div>

          {/* Floating hearts animation */}
          <div className="absolute inset-0 overflow-hidden">
            {[...Array(8)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute text-white opacity-30"
                initial={{
                  x: `${Math.random() * 100}%`,
                  y: "100%",
                  scale: 0.3 + Math.random() * 0.7,
                }}
                animate={{
                  y: "-20%",
                  rotate: Math.random() * 360,
                  transition: {
                    repeat: Infinity,
                    duration: 10 + Math.random() * 20,
                    delay: Math.random() * 5,
                    ease: "linear",
                  },
                }}
              >
                <Heart
                  fill={Math.random() > 0.5 ? "#fff" : "none"}
                  size={20 + Math.random() * 20}
                />
              </motion.div>
            ))}
          </div>
        </div>

        {/* Profile photo - Hide when preview is showing */}
        {!showPreview && (
          <div className="relative -mt-14">
            <motion.div
              whileHover={{ scale: 1.05 }}
              onClick={() => setPhotoExpanded(!photoExpanded)}
              className="cursor-pointer"
            >
              {showProfilePhotoValue ? (
                // Check if avatar mode is enabled
                user.showAsAvatar && user.avatarUrl ? (
                  // Show the cartoon avatar
                  <img
                    src={user.avatarUrl}
                    className="w-28 h-28 rounded-full object-cover border-4 border-white shadow-lg"
                    alt="User cartoon avatar"
                  />
                ) : user.photoUrl ? (
                  // Show the regular profile photo
                  <img
                    src={user.photoUrl}
                    className="w-28 h-28 rounded-full object-cover border-4 border-white shadow-lg"
                    alt="User profile"
                  />
                ) : null
              ) : (
                <div className="w-28 h-28 rounded-full bg-gradient-to-r from-purple-300 to-pink-300 border-4 border-white shadow-lg flex items-center justify-center">
                  <span className="text-white text-4xl font-light">
                    {user.fullName?.charAt(0) || "U"}
                  </span>
                </div>
              )}
            </motion.div>
            
            {/* Camera icon button for Profile Picture Crop & Zoom Editor */}
            <div className="absolute bottom-1 right-1 z-30">
              <ProfilePhotoEditButton
                userId={user.id}
                photoId={userPhotos?.find(photo => photo.isPrimary)?.id}
                currentPhotoUrl={user.photoUrl}
                className="bg-purple-500 hover:bg-purple-600 text-white border-white"
                useCamera={true}
              />
            </div>
          </div>
        )}
      </div>

      {/* Profile Preview (SwipeCard) */}
      {showPreview && (
        <div className="mt-0 mb-6 px-4 block relative z-40 bg-white dark:bg-gray-900 pt-4 pb-2 rounded-lg">
          <div className="relative">
            <div className="flex flex-col gap-0 mt-[-8px]">
              <h3 className="text-center text-sm font-semibold text-purple-800 dark:text-purple-300 mt-0 mb-0 leading-none">
                {translate("profile.profilePreview")}
              </h3>
              <p className="text-center text-xs text-gray-500 dark:text-gray-400 mt-0 mb-1 leading-none pt-1">
                {translate("profile.previewDescription")}
              </p>
            </div>

            {/* SwipeCard Preview */}
            <div className="w-full h-[480px] mx-auto border-2 border-white dark:border-gray-700 rounded-2xl shadow-lg overflow-hidden">
              <div className="h-full flex flex-col relative">
                {/* Profile image */}
                <div className="relative h-full w-full overflow-hidden">
                  {showProfilePhotoValue ? (
                    // Check if avatar mode is enabled
                    user.showAsAvatar && user.avatarUrl ? (
                      // Show the cartoon avatar
                      <img
                        src={user.avatarUrl}
                        className="w-full h-full object-cover"
                        alt={`${user.fullName}'s avatar`}
                      />
                    ) : user.photoUrl ? (
                      // Show the regular profile photo
                      <img
                        src={user.photoUrl}
                        className="w-full h-full object-cover"
                        alt={`${user.fullName}'s profile`}
                      />
                    ) : null
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/50 dark:to-pink-900/50">
                      <div className="p-6 text-center bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl shadow-md">
                        <span className="text-4xl font-bold text-purple-300 dark:text-purple-200 block mb-2">
                          {user.fullName?.charAt(0) || "?"}
                        </span>
                        <span className="text-purple-500 dark:text-purple-300 font-medium">
                          No Photo Available
                        </span>
                      </div>
                    </div>
                  )}

                  {/* Profile info overlay */}
                  <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 via-black/40 to-transparent px-4 pt-14 pb-3 flex flex-col">
                    {/* Main row with name and age - and tribe if there's only one */}
                    <div className="flex flex-col mb-1">
                      {/* Name and age row, with optional tribe badge */}
                      <div className="flex justify-between items-center">
                        <h2 className="text-3xl font-extrabold">
                          <span className="bg-gradient-to-r from-amber-400 to-fuchsia-500 bg-clip-text text-transparent drop-shadow-[0_2px_2px_rgba(0,0,0,0.95)] static-gradient">
                            <span className="text-4xl">
                              {user.fullName.split(" ")[0].charAt(0)}
                            </span>
                            {user.fullName.split(" ")[0].slice(1)},{" "}
                            {calculateAge(user.dateOfBirth)}
                          </span>
                        </h2>
                        
                        {/* Single tribe badge on the same row */}
                        {user.ethnicity && fieldVisibility.tribe && !user.secondaryTribe && (
                          <Badge className="bg-gradient-to-r from-purple-600/90 to-fuchsia-600/90 text-white shadow-md text-xs py-0.5 px-2 border-0 static-gradient ml-2">
                            {user.ethnicity}
                          </Badge>
                        )}
                      </div>
                      
                      {/* Two tribe badges in a separate row */}
                      {user.ethnicity && fieldVisibility.tribe && user.secondaryTribe && (
                        <div className="flex flex-wrap gap-1 mt-1.5">
                          <Badge className="bg-gradient-to-r from-purple-600/90 to-fuchsia-600/90 text-white shadow-md text-xs py-0.5 px-2 border-0 static-gradient">
                            {user.ethnicity}
                          </Badge>
                          <Badge className="bg-gradient-to-r from-fuchsia-600/90 to-purple-600/90 text-white shadow-md text-xs py-0.5 px-2 border-0 static-gradient">
                            {user.secondaryTribe}
                          </Badge>
                        </div>
                      )}
                    </div>

                    {/* Location row */}
                    {user.location && fieldVisibility.residence && (
                      <div className="flex items-center mb-1.5">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-4 w-4 mr-1 text-amber-400 drop-shadow-[0_1.5px_1.5px_rgba(0,0,0,0.9)]"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        >
                          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0118 0z" />
                          <circle cx="12" cy="10" r="3" />
                        </svg>
                        <span className="font-medium text-sm text-orange-100 drop-shadow-[0_1.8px_1.8px_rgba(0,0,0,0.95)]">
                          {user.location}
                        </span>
                      </div>
                    )}

                    {/* Job/Profession row with icon */}
                    {user.profession && fieldVisibility.profession && (
                      <div className="flex items-center mb-1.5">
                        <Gift 
                          className="h-4 w-4 mr-1 text-teal-400 drop-shadow-[0_1.5px_1.5px_rgba(0,0,0,0.9)]"
                        />
                        <span className="bg-gradient-to-r from-sky-400 to-teal-400 bg-clip-text text-transparent font-medium text-sm drop-shadow-[0_1.8px_1.8px_rgba(0,0,0,0.95)] static-gradient">
                          {user.profession}
                        </span>
                      </div>
                    )}

                    {/* Religion display */}
                    {user.religion && fieldVisibility.religion && (
                      <div className="flex items-center mb-1.5">
                        <Cross className="h-4 w-4 mr-1 text-pink-400 drop-shadow-[0_1.5px_1.5px_rgba(0,0,0,0.9)]" />
                        <span className="font-medium text-sm text-pink-100 drop-shadow-[0_1.8px_1.8px_rgba(0,0,0,0.95)]">
                          {getReligionDisplayName(user.religion)}
                        </span>
                      </div>
                    )}

                    {/* Bio */}
                    {user.bio && fieldVisibility.bio && (
                      <div className="mb-2 rounded-md overflow-hidden">
                        <p className="text-white/95 leading-tight text-xs font-medium bg-gradient-to-r from-black/15 to-purple-900/15 p-2 rounded-md drop-shadow-[0_1.8px_1.8px_rgba(0,0,0,0.95)] static-gradient">
                          {user.bio}
                        </p>
                      </div>
                    )}
                    
                    {/* Interests display (using visibleInterestStrings from useUserInterests hook) */}
                    {fieldVisibility.interests && (
                      <div className="mb-2">
                        {/* Added Top Interests heading - same as in SwipeCard */}
                        <span className="font-semibold text-white text-sm drop-shadow-[0_1.8px_1.8px_rgba(0,0,0,0.95)]">
                          {translate("app.topInterests")}:
                        </span>
                        
                        <div className="flex flex-wrap gap-1.5 mt-1.5">
                          {interestsLoading ? (
                            // Loading skeleton for interests
                            <>
                              <div className="h-5 w-16 rounded bg-white/20 animate-pulse"></div>
                              <div className="h-5 w-20 rounded bg-white/20 animate-pulse"></div>
                              <div className="h-5 w-14 rounded bg-white/20 animate-pulse"></div>
                            </>
                          ) : Array.isArray(visibleInterestStrings) && visibleInterestStrings.length > 0 ? (
                            // Display real user interests (only visible ones)
                            visibleInterestStrings.slice(0, 3).map((interest: string, index: number) => {
                              // Dynamic colorful badges with alternating gradients
                              const gradientClasses = [
                                "from-purple-500/90 to-fuchsia-500/90",
                                "from-amber-500/90 to-orange-500/90",
                                "from-teal-500/90 to-cyan-500/90"
                              ];
                              const gradientClass = gradientClasses[index % gradientClasses.length];
                              
                              return (
                                <Badge 
                                  key={`${user.id}-${index}`}
                                  className={`bg-gradient-to-r ${gradientClass} text-white shadow-lg text-xs py-0 px-2.5 border-0 static-gradient no-animation`}
                                >
                                  {interest}
                                </Badge>
                              );
                            })
                          ) : (
                            // No interests to display
                            <span className="text-xs text-white/70 italic">
                              {translate("profile.noInterestsVisible")}
                            </span>
                          )}
                        </div>
                      </div>
                    )}

                    {/* Relationship Goals */}
                    {user.relationshipGoal &&
                      fieldVisibility.relationshipGoal && (
                        <div className="flex items-center mb-2">
                          <CalendarHeart
                            className="h-4 w-4 mr-1 text-rose-400 drop-shadow-[0_1.5px_1.5px_rgba(0,0,0,0.9)]"
                          />
                          <span className="bg-gradient-to-r from-rose-300 to-red-400 bg-clip-text text-transparent font-medium text-sm drop-shadow-[0_1.8px_1.8px_rgba(0,0,0,0.95)]">
                            Looking for: {user.relationshipGoal}
                          </span>
                        </div>
                      )}


                  </div>
                </div>

                {/* No swipe actions as requested */}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Main content section */}
      <div className="mt-1 px-5 text-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
        >
          {/* Name/Age field removed as requested */}
        </motion.div>

        {/* Profile Completion Health Bar - Enhanced with dynamic feedback */}
        <div className="mt-2 mb-3">
          <div className="relative h-5 w-72 bg-gray-200 rounded-full mx-auto border border-gray-300 dark:border-gray-600 overflow-hidden">
            <motion.div
              initial={{ width: "0%" }}
              animate={{ width: `${profileCompletionPercentage}%` }}
              transition={{ 
                duration: 0.5, 
                ease: "easeOut",
                delay: 0.1 
              }}
              className="h-full rounded-full transition-all duration-500 ease-out"
              style={{ 
                backgroundColor: getHealthBarColor(profileCompletionPercentage),
                boxShadow: profileCompletionPercentage > 0 ? `0 0 10px ${getHealthBarColor(profileCompletionPercentage)}` : 'none'
              }}
            >
              {/* Light reflection effect */}
              <div className="absolute top-0 left-0 right-0 h-1/2 bg-white/20 rounded-t-full"></div>
            </motion.div>
            
            {/* Percentage indicator with enhanced visibility */}
            <div className="absolute inset-0 flex items-center justify-center">
              <span 
                className="text-xs font-bold drop-shadow-[0_0px_2px_rgba(0,0,0,0.7)]" 
                style={{
                  color: '#ffffff',
                  textShadow: '0px 0px 3px rgba(0,0,0,0.9), 0px 0px 6px rgba(255,255,255,0.5)'
                }}
              >
                {profileCompletionPercentage}% complete
              </span>
            </div>
          </div>
          
          {/* Status message based on completion level */}
          <div className="flex flex-col items-center mt-1">
            {profileCompletionPercentage < 100 ? (
              <>
                <p className="text-xs text-gray-600 dark:text-gray-300 italic">
                  Complete your profile to improve matches
                </p>
                
                {/* Missing fields list - shows when below 100% */}
                {profileCompletionPercentage < 100 && (
                  <div className="mt-1 text-xs flex flex-wrap justify-center gap-1 max-w-md">
                    {/* Profile Basic Info Badges */}
                    {(!userPhotos || userPhotos.length === 0) && 
                      <span 
                        onClick={() => document.getElementById('photos-section')?.scrollIntoView({ behavior: 'smooth' })} 
                        className="px-1.5 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300 rounded-full text-[10px] border border-orange-200 dark:border-orange-700 cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800/40 transition-colors"
                      >
                        <Camera className="inline-block h-2 w-2 mr-0.5" />
                        Photos
                      </span>
                    }
                    {!user.location && 
                      <span 
                        onClick={() => {
                          document.getElementById('residence-section')?.scrollIntoView({ behavior: 'smooth' });
                          setTimeout(() => toggleEditMode("residence"), 800);
                        }}
                        className="px-1.5 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300 rounded-full text-[10px] border border-orange-200 dark:border-orange-700 cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800/40 transition-colors"
                      >
                        <MapPin className="inline-block h-2 w-2 mr-0.5" />
                        Residence
                      </span>
                    }
                    {!user.relationshipGoal && 
                      <span 
                        onClick={() => {
                          document.getElementById('relationship-goals-section')?.scrollIntoView({ behavior: 'smooth' });
                          setTimeout(() => toggleEditMode("relationshipGoal"), 800);
                        }}
                        className="px-1.5 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300 rounded-full text-[10px] border border-orange-200 dark:border-orange-700 cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800/40 transition-colors"
                      >
                        <CalendarHeart className="inline-block h-2 w-2 mr-0.5" />
                        Relationship Goals
                      </span>
                    }
                    {!user.bio && 
                      <span 
                        onClick={() => {
                          document.getElementById('bio-section')?.scrollIntoView({ behavior: 'smooth' });
                          setTimeout(() => toggleEditMode("bio"), 800);
                        }}
                        className="px-1.5 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300 rounded-full text-[10px] border border-orange-200 dark:border-orange-700 cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800/40 transition-colors"
                      >
                        <BookType className="inline-block h-2 w-2 mr-0.5" />
                        Bio
                      </span>
                    }
                    {!user.profession && 
                      <span 
                        onClick={() => {
                          document.getElementById('profession-section')?.scrollIntoView({ behavior: 'smooth' });
                          setTimeout(() => toggleEditMode("profession"), 800);
                        }}
                        className="px-1.5 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300 rounded-full text-[10px] border border-orange-200 dark:border-orange-700 cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800/40 transition-colors"
                      >
                        <Gift className="inline-block h-2 w-2 mr-0.5" />
                        Profession
                      </span>
                    }
                    {!user.ethnicity && 
                      <span 
                        onClick={() => {
                          document.getElementById('tribe-section')?.scrollIntoView({ behavior: 'smooth' });
                          setTimeout(() => toggleEditMode("tribe"), 800);
                        }}
                        className="px-1.5 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300 rounded-full text-[10px] border border-orange-200 dark:border-orange-700 cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800/40 transition-colors"
                      >
                        <UserCheck className="inline-block h-2 w-2 mr-0.5" />
                        Tribe
                      </span>
                    }
                    {!user.religion && 
                      <span 
                        onClick={() => {
                          document.getElementById('religion-section')?.scrollIntoView({ behavior: 'smooth' });
                          setTimeout(() => toggleEditMode("religion"), 800);
                        }}
                        className="px-1.5 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300 rounded-full text-[10px] border border-orange-200 dark:border-orange-700 cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800/40 transition-colors"
                      >
                        <span className="inline-block mr-0.5">🙏</span>
                        Religion
                      </span>
                    }
                    {!hasInterests && 
                      <span 
                        onClick={() => document.getElementById('interests-section')?.scrollIntoView({ behavior: 'smooth' })}
                        className="px-1.5 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300 rounded-full text-[10px] border border-orange-200 dark:border-orange-700 cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800/40 transition-colors"
                      >
                        <Heart className="inline-block h-2 w-2 mr-0.5" />
                        Interests
                      </span>
                    }
                    
                    {/* Dating Preferences Badges */}
                    {!extendedUser.datingPreferences?.ageRange && 
                      <Link to="/dating-preferences?section=basics&field=ageRange">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Settings className="inline-block h-2 w-2 mr-0.5" />
                          Age Range
                        </span>
                      </Link>
                    }
                    {!extendedUser.datingPreferences?.height && 
                      <Link to="/dating-preferences?section=basics&field=height">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Settings className="inline-block h-2 w-2 mr-0.5" />
                          Height Range
                        </span>
                      </Link>
                    }
                    {/* Removed Religious Importance badge as requested */}
                    {!extendedUser.datingPreferences?.religion?.length && 
                      <Link to="/dating-preferences?section=background&field=religion">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Settings className="inline-block h-2 w-2 mr-0.5" />
                          Religion Preferences
                        </span>
                      </Link>
                    }
                    {(extendedUser.datingPreferences?.hasChildren === undefined || extendedUser.datingPreferences?.hasChildren === null) && 
                      <Link to="/dating-preferences?section=lifestyle&field=hasChildren">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <UserPlus className="inline-block h-2 w-2 mr-0.5" />
                          Has Children
                        </span>
                      </Link>
                    }
                    {(extendedUser.datingPreferences?.wantsChildren === undefined || extendedUser.datingPreferences?.wantsChildren === null) && 
                      <Link to="/dating-preferences?section=lifestyle&field=wantsChildren">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Heart className="inline-block h-2 w-2 mr-0.5" />
                          Wants Children
                        </span>
                      </Link>
                    }
                    {!extendedUser.datingPreferences?.educationLevel?.length && 
                      <Link to="/dating-preferences?section=background&field=educationLevel">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Settings className="inline-block h-2 w-2 mr-0.5" />
                          Education Level
                        </span>
                      </Link>
                    }
                    {!extendedUser.datingPreferences?.dealBreakers?.length && 
                      <Link to="/dating-preferences?section=dealbreakers&field=dealBreakers">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Settings className="inline-block h-2 w-2 mr-0.5" />
                          Deal Breakers
                        </span>
                      </Link>
                    }
                    {!extendedUser.datingPreferences?.bodyType?.length && 
                      <Link to="/dating-preferences?section=basics&field=bodyType">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Settings className="inline-block h-2 w-2 mr-0.5" />
                          Body Type
                        </span>
                      </Link>
                    }
                    {!extendedUser.datingPreferences?.interests?.length && 
                      <Link to="/dating-preferences?section=dealbreakers&field=interests">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Settings className="inline-block h-2 w-2 mr-0.5" />
                          Interest Preferences
                        </span>
                      </Link>
                    }
                    {!extendedUser.datingPreferences?.matchingPriorities?.length && 
                      <Link to="/dating-preferences?section=dealbreakers&field=matchingPriorities">
                        <span className="px-1.5 py-0.5 bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-300 rounded-full text-[10px] border border-pink-200 dark:border-pink-700 cursor-pointer hover:bg-pink-200 dark:hover:bg-pink-800/40 transition-colors">
                          <Settings className="inline-block h-2 w-2 mr-0.5" />
                          Matching Priorities
                        </span>
                      </Link>
                    }
                    {/* Removed Dating Preferences badges as requested */}
                  </div>
                )}
              </>
            ) : (
              <p 
                className="text-xs font-medium italic" 
                style={{ 
                  color: '#006400', 
                  textShadow: '0px 0px 5px rgba(255,255,255,0.7)',
                  background: 'rgba(255,255,255,0.3)',
                  padding: '1px 8px',
                  borderRadius: '8px',
                  border: '1px solid rgba(0,100,0,0.3)'
                }}
              >
                Your profile is complete! ✓
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Profile Fields in the Requested Order */}
      <div className="px-5 mb-6">
        <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 mb-3 uppercase tracking-wide">
          YOUR INFO
        </h3>
        <div className="grid grid-cols-1 gap-2">
          {/* Residence (location) */}
          <div id="residence-section" className="bg-white dark:bg-gray-800 border border-pink-100 dark:border-pink-800/50 rounded-lg p-2">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium text-purple-800 dark:text-purple-300 flex items-center">
                <MapPin className="h-3.5 w-3.5 mr-1.5 text-pink-500" />
                {translate("profile.residence")}
              </h3>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => toggleEditMode("residence")}
                  className="p-1 text-gray-400 hover:text-purple-600 transition-colors"
                >
                  <Pencil size={14} />
                </button>
                <div className="flex items-center space-x-1">
                  <span className="text-xs text-gray-500 dark:text-gray-400">{translate("profile.show")}</span>
                  <Switch
                    checked={fieldVisibility.residence}
                    onCheckedChange={() => toggleVisibility("residence")}
                    className="data-[state=checked]:bg-purple-500"
                  />
                </div>
              </div>
            </div>

            {editField === "residence" ? (
              <div className="mt-2">
                <CityInput
                  initialValue={residenceValue}
                  onLocationSelect={setResidenceValue}
                  placeholder={translate("profile.enterCityCountry")}
                  className="text-xs border-pink-200"
                />
                <div className="mt-2 flex justify-end space-x-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => saveField("residence", true)}
                    className="h-7 text-xs border-gray-300 text-gray-600 hover:bg-gray-100 flex items-center"
                  >
                    <X className="h-3.5 w-3.5 mr-1 text-gray-500" />
                    {translate("profile.clear")}
                  </Button>
                  <Button
                    size="sm"
                    onClick={() => saveField("residence")}
                    className="h-7 bg-purple-500 hover:bg-purple-600 text-xs"
                  >
                    {translate("profile.save")}
                  </Button>
                </div>
              </div>
            ) : (
              <p className="text-sm mt-1">{user.location || translate("profile.notSpecified")}</p>
            )}
          </div>

          {/* Tribe (ethnicity) */}
          <div id="tribe-section" className="bg-white dark:bg-gray-800 border border-pink-100 dark:border-pink-800/50 rounded-lg p-2">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium text-purple-800 dark:text-purple-300 flex items-center">
                <UserCheck className="h-3.5 w-3.5 mr-1.5 text-pink-500" />
                {translate("profile.tribe")}
              </h3>
              <div className="flex items-center space-x-1">
                <button
                  onClick={() => toggleEditMode("tribe")}
                  className="p-1 text-gray-400 hover:text-purple-600 transition-colors"
                >
                  <Pencil size={14} />
                </button>
                <div className="flex items-center space-x-1">
                  <span className="text-xs text-gray-500 dark:text-gray-400">{translate("profile.show")}</span>
                  <Switch
                    checked={fieldVisibility.tribe}
                    onCheckedChange={() => toggleVisibility("tribe")}
                    className="data-[state=checked]:bg-purple-500"
                  />
                </div>
              </div>
            </div>
            
            {editField === "tribe" ? (
              <div className="mt-2">
                <TribeSelect
                  value={tribeValues}
                  onChange={setTribeValues}
                  maxSelections={2}
                  className="text-xs"
                  placeholder={translate("profile.selectTribes")}
                />
                <div className="mt-2 flex justify-end space-x-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => saveField("tribe", true)}
                    className="h-7 text-xs border-gray-300 text-gray-600 hover:bg-gray-100 flex items-center"
                  >
                    <X className="h-3.5 w-3.5 mr-1 text-gray-500" />
                    {translate("profile.clear")}
                  </Button>
                  <Button
                    size="sm"
                    onClick={() => saveField("tribe")}
                    className="h-7 bg-purple-500 hover:bg-purple-600 text-xs"
                  >
                    {translate("profile.save")}
                  </Button>
                </div>
              </div>
            ) : (
              <div className="flex flex-col gap-1 mt-1">
                <div className="flex flex-wrap gap-1">
                  <Badge className="bg-gradient-to-r from-purple-500 to-fuchsia-500 text-white shadow-sm text-xs py-0.5 px-2 border-0">
                    {user.ethnicity || translate("profile.notSpecified")}
                  </Badge>
                  {user.secondaryTribe && (
                    <Badge className="bg-gradient-to-r from-fuchsia-500 to-purple-500 text-white shadow-sm text-xs py-0.5 px-2 border-0">
                      {user.secondaryTribe}
                    </Badge>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* Profession */}
          <div id="profession-section" className="bg-white dark:bg-gray-800 border border-pink-100 dark:border-pink-800/50 rounded-lg p-2">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium text-purple-800 dark:text-purple-300 flex items-center">
                <Gift className="h-3.5 w-3.5 mr-1.5 text-pink-500" />
                {translate("profile.profession")}
              </h3>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => toggleEditMode("profession")}
                  className="p-1 text-gray-400 hover:text-purple-600 transition-colors"
                >
                  <Pencil size={14} />
                </button>
                <div className="flex items-center space-x-1">
                  <span className="text-xs text-gray-500 dark:text-gray-400">{translate("profile.show")}</span>
                  <Switch
                    checked={fieldVisibility.profession}
                    onCheckedChange={() => toggleVisibility("profession")}
                    className="data-[state=checked]:bg-purple-500"
                  />
                </div>
              </div>
            </div>

            {editField === "profession" ? (
              <div className="mt-2">
                <Input
                  value={professionValue}
                  onChange={(e) => setProfessionValue(e.target.value)}
                  placeholder={translate("profile.enterProfession")}
                  className="text-xs border-pink-200"
                />
                <div className="mt-2 flex justify-end space-x-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => saveField("profession", true)}
                    className="h-7 text-xs border-gray-300 text-gray-600 hover:bg-gray-100 flex items-center"
                  >
                    <X className="h-3.5 w-3.5 mr-1 text-gray-500" />
                    {translate("profile.clear")}
                  </Button>
                  <Button
                    size="sm"
                    onClick={() => saveField("profession")}
                    className="h-7 bg-purple-500 hover:bg-purple-600 text-xs"
                  >
                    {translate("profile.save")}
                  </Button>
                </div>
              </div>
            ) : (
              <p className="text-sm mt-1">
                {user.profession || translate("profile.notSpecified")}
              </p>
            )}
          </div>

          {/* Religion */}
          <div id="religion-section" className="bg-white dark:bg-gray-800 border border-pink-100 dark:border-pink-800/50 rounded-lg p-2">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium text-purple-800 dark:text-purple-300 flex items-center">
                <span className="text-pink-500 mr-1.5 text-sm">🙏</span>
                {translate("profile.religion")}
              </h3>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => toggleEditMode("religion")}
                  className="p-1 text-gray-400 hover:text-purple-600 transition-colors"
                >
                  <Pencil size={14} />
                </button>
                <div className="flex items-center space-x-1">
                  <span className="text-xs text-gray-500 dark:text-gray-400">{translate("profile.show")}</span>
                  <Switch
                    checked={fieldVisibility.religion}
                    onCheckedChange={() => toggleVisibility("religion")}
                    className="data-[state=checked]:bg-purple-500"
                  />
                </div>
              </div>
            </div>

            {editField === "religion" ? (
              <div className="mt-2">
                <ReligionSelect
                  value={religionValue}
                  onValueChange={(value) => setReligionValue(value)}
                  placeholder={translate("profile.selectReligion")}
                  allowClear={false}
                />
                <div className="mt-2 flex justify-end space-x-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => saveField("religion", true)}
                    className="h-7 text-xs border-gray-300 text-gray-600 hover:bg-gray-100 flex items-center"
                  >
                    <X className="h-3.5 w-3.5 mr-1 text-gray-500" />
                    {translate("profile.clear")}
                  </Button>
                  <Button
                    size="sm"
                    onClick={() => saveField("religion")}
                    className="h-7 bg-purple-500 hover:bg-purple-600 text-xs"
                  >
                    {translate("profile.save")}
                  </Button>
                </div>
              </div>
            ) : (
              <p className="text-sm mt-1">
                {user.religion
                  ? getReligionDisplayName(user.religion)
                  : translate("profile.notSpecified")}
              </p>
            )}
          </div>

          {/* About me (bio) */}
          <div id="bio-section" className="bg-white dark:bg-gray-800 border border-pink-100 dark:border-pink-800/50 rounded-lg p-2">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium text-purple-800 dark:text-purple-300 flex items-center">
                <MessageCircle className="h-3.5 w-3.5 mr-1.5 text-pink-500" />
                {translate("profile.aboutMe")}
              </h3>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => toggleEditMode("bio")}
                  className="p-1 text-gray-400 hover:text-purple-600 transition-colors"
                >
                  <Pencil size={14} />
                </button>
                <div className="flex items-center space-x-1">
                  <span className="text-xs text-gray-500 dark:text-gray-400">{translate("profile.show")}</span>
                  <Switch
                    checked={fieldVisibility.bio}
                    onCheckedChange={() => toggleVisibility("bio")}
                    className="data-[state=checked]:bg-purple-500"
                  />
                </div>
              </div>
            </div>

            {editField === "bio" ? (
              <div className="mt-2">
                <Input
                  value={bioValue}
                  onChange={(e) => setBioValue(e.target.value)}
                  placeholder={translate("profile.tellAboutYourself")}
                  className="text-xs border-pink-200"
                />
                <div className="mt-2 flex justify-end space-x-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => saveField("bio", true)}
                    className="h-7 text-xs border-gray-300 text-gray-600 hover:bg-gray-100 flex items-center"
                  >
                    <X className="h-3.5 w-3.5 mr-1 text-gray-500" />
                    {translate("profile.clear")}
                  </Button>
                  <Button
                    size="sm"
                    onClick={() => saveField("bio")}
                    className="h-7 bg-purple-500 hover:bg-purple-600 text-xs"
                  >
                    {translate("profile.save")}
                  </Button>
                </div>
              </div>
            ) : (
              <p className="text-sm mt-1">{user.bio || translate("profile.notSpecified")}</p>
            )}
          </div>


        </div>
      </div>

      {/* Photos section */}
      <div className="px-5 mb-6" id="photos-section">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide flex items-center">
            <Camera className="h-4 w-4 mr-2 text-pink-500" />
            MY PHOTOS
          </h3>
          <div className="flex flex-col gap-2">
            <div className="flex items-center space-x-1">
              <span className="text-[10px] text-gray-500 dark:text-gray-400">
                Show photo
              </span>
              <Switch 
                checked={showProfilePhotoValue}
                className="scale-75 origin-left data-[state=checked]:bg-purple-500" 
                onCheckedChange={(checked) => {
                  setShowProfilePhotoValue(checked);
                  
                  // Apply optimistic update - type-safe approach
                  const optimisticUser = { 
                    ...user, 
                    showProfilePhoto: checked 
                  } as typeof user;
                  queryClient.setQueryData(["/api/user"], optimisticUser);
                  
                  // Update the profile immediately when toggled
                  updateProfileMutation.mutate({
                    showProfilePhoto: checked
                  });
                  
                  toast({
                    title: checked ? "Profile photo visible" : "Profile photo hidden",
                    description: checked 
                      ? "Your profile photo is now visible to other users" 
                      : "Your profile photo is now hidden from other users",
                    duration: 3000,
                  });
                }}
                aria-label="Toggle profile photo visibility"
              />
            </div>
            
            {/* Avatar toggle */}
            <div className="flex items-center space-x-1">
              <span className="text-[10px] text-gray-500 dark:text-gray-400">
                AVATAR
              </span>
              <Switch 
                checked={avatarToggleValue}
                className="scale-75 origin-left data-[state=checked]:bg-indigo-500" 
                onCheckedChange={(checked) => {
                  // Check if they have a primary photo first
                  if (checked && !user.photoUrl) {
                    toast({
                      title: "No profile photo found",
                      description: "You need to upload a profile photo before creating a cartoon avatar.",
                      variant: "destructive",
                      duration: 5000,
                    });
                    return;
                  }
                  
                  console.log('Avatar toggle clicked with state:', {
                    checked,
                    hasAvatar: !!user.avatarUrl,
                    showAsAvatar: user.showAsAvatar
                  });
                  
                  // First check if we need to generate the avatar
                  if (checked && !user.avatarUrl) {
                    // No avatar yet, generate one
                    setGeneratingAvatar(true);
                  } else if (checked) {
                    // Has avatar - use dialog instead of browser confirm
                    setShowRegenerateDialog(true);
                    return; // Exit early and wait for dialog response
                  } else {
                    // Turning off avatar
                    setAvatarToggleValue(checked);
                    
                    // Apply optimistic update
                    const optimisticUser = { 
                      ...user, 
                      showAsAvatar: checked 
                    } as typeof user;
                    queryClient.setQueryData(["/api/user"], optimisticUser);
                    
                    // Update the profile
                    updateProfileMutation.mutate({
                      showAsAvatar: checked
                    });
                    
                    toast({
                      title: "Avatar mode disabled",
                      description: "Your regular profile photo is now visible to other users",
                      duration: 3000,
                    });
                    return; // Exit early
                  }
                  
                  // If we're here, we need to generate an avatar
                  // Show loading state
                    setGeneratingAvatar(true);
                    
                    // Find the primary photo URL
                    const primaryPhoto = userPhotos?.find(photo => photo.isPrimary);
                    if (!primaryPhoto) {
                      toast({
                        title: "No profile photo found",
                        description: "Please upload a profile photo first before generating an avatar",
                        variant: "destructive",
                        duration: 5000,
                      });
                      setGeneratingAvatar(false);
                      return;
                    }
                    
                    // Show generating toast
                    toast({
                      title: "Generating cartoon avatar",
                      description: "Please wait while we create your cartoon avatar...",
                      duration: 8000,
                    });
                    
                    // Define an async function to generate the avatar
                    const generateCartoonAvatar = async () => {
                      try {
                        // Call API to generate avatar using Cloudinary
                        const response = await fetch("/api/avatar/generate-cloudinary", {
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json",
                          },
                          body: JSON.stringify({
                            imageUrl: primaryPhoto.photoUrl,
                            style: "CARTOON", // Using default cartoon style
                          }),
                        });
                        
                        if (!response.ok) {
                          throw new Error(`Error generating avatar: ${response.statusText}`);
                        }
                        
                        const data = await response.json();
                        
                        // Apply optimistic update
                        const optimisticUser = { 
                          ...user, 
                          avatarUrl: data.avatarUrl,
                          showAsAvatar: true 
                        } as typeof user;
                        queryClient.setQueryData(["/api/user"], optimisticUser);
                        
                        // Update the profile
                        updateProfileMutation.mutate({
                          avatarUrl: data.avatarUrl,
                          showAsAvatar: true
                        });
                        
                        // Show success toast
                        toast({
                          title: "Avatar generated successfully",
                          description: "Your cartoon avatar has been created and is now active",
                          duration: 3000,
                        });
                        
                        // Update local state
                        setAvatarToggleValue(true);
                      } catch (error) {
                        console.error("Avatar generation error:", error);
                        toast({
                          title: "Avatar generation failed",
                          description: error instanceof Error ? error.message : "Unknown error occurred",
                          variant: "destructive",
                          duration: 5000,
                        });
                        
                        // Don't toggle the avatar switch on error
                        setAvatarToggleValue(false);
                      } finally {
                        setGeneratingAvatar(false);
                      }
                    };
                    
                    // Call the async function
                    generateCartoonAvatar();
                  } else {
                    // Just toggle the avatar visibility without generating a new one
                    setAvatarToggleValue(checked);
                    
                    // Apply optimistic update
                    const optimisticUser = { 
                      ...user, 
                      showAsAvatar: checked 
                    } as typeof user;
                    queryClient.setQueryData(["/api/user"], optimisticUser);
                    
                    // Update the profile
                    updateProfileMutation.mutate({
                      showAsAvatar: checked
                    });
                    
                    toast({
                      title: checked ? "Avatar mode enabled" : "Avatar mode disabled",
                      description: checked 
                        ? "Your Disney-Pixar style cartoon avatar is now visible to other users" 
                        : "Your regular profile photo is now visible to other users",
                      duration: 3000,
                    });
                  }
                }}
                disabled={generatingAvatar}
                aria-label="Toggle avatar display"
              />
              {generatingAvatar && (
                <div className="flex items-center">
                  <Loader2 className="h-3 w-3 animate-spin text-indigo-500 ml-1" />
                  <span className="text-[8px] ml-1 text-indigo-500">Generating...</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Photo gallery */}
        <div className="grid grid-cols-3 gap-2 mb-4">
          {loadingPhotos ? (
            <div className="col-span-3 flex justify-center py-4">
              <Loader2 className="h-6 w-6 animate-spin text-purple-500" />
            </div>
          ) : (
            <>
              {/* Existing photos first */}
              {!userPhotos || userPhotos.length === 0 ? (
                <>
                  {/* Add photo cell (first if no photos) */}
                  <div
                    className="aspect-square rounded-lg overflow-hidden flex items-center justify-center cursor-pointer bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/20 dark:to-pink-900/20 border-2 border-dashed border-purple-300 dark:border-purple-600"
                  >
                    <ProfilePhotoButton
                      userId={user.id}
                      currentPhotoUrl={user.photoUrl}
                      variant="ghost"
                      className="w-full h-full flex flex-col items-center justify-center"
                    >
                      <div className="w-12 h-12 rounded-full bg-purple-500 flex items-center justify-center mb-1">
                        <span className="text-white text-2xl font-light">
                          +
                        </span>
                      </div>
                      <span className="text-xs text-purple-700 dark:text-purple-300 font-medium">
                        {translate("profile.addPhoto")}
                      </span>
                    </ProfilePhotoButton>
                  </div>
                  <div className="col-span-2 flex items-center justify-center">
                    <p className="text-sm text-gray-500 dark:text-gray-400 italic">
                      {translate("profile.noPhotosYet")}
                    </p>
                  </div>
                </>
              ) : (
                <>
                  {/* Show existing photos first */}
                  {userPhotos.map((photo) => (
                    <div
                      key={photo.id}
                      className="relative aspect-square rounded-lg overflow-hidden group"
                    >
                      <img
                        src={photo.photoUrl}
                        alt={translate("profile.userPhoto")}
                        className="w-full h-full object-cover"
                        loading="eager"
                      />

                      {/* Star icon for primary photo */}
                      {photo.isPrimary && (
                        <div className="absolute top-2 right-2 bg-yellow-500 text-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg z-10">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="currentColor"
                            className="w-4 h-4"
                          >
                            <path
                              fillRule="evenodd"
                              d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z"
                              clipRule="evenodd"
                            />
                          </svg>
                        </div>
                      )}
                      
                      {/* Edit button for primary photos */}
                      {photo.isPrimary && (
                        <div className="absolute bottom-2 right-2 z-20">
                          <ProfilePhotoEditButton
                            userId={user.id}
                            photoId={photo.id}
                            currentPhotoUrl={photo.photoUrl}
                          />
                        </div>
                      )}

                      {/* Actions overlay - only shown for non-primary photos */}
                      {!photo.isPrimary && (
                        <div className="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity z-10">
                          <div className="flex space-x-2">
                            {/* Delete button */}
                            <Button
                              size="sm"
                              variant="outline"
                              className="bg-white/90 text-red-600 border-red-300 hover:bg-white hover:text-red-700"
                              onClick={() => deletePhotoMutation.mutate(photo.id)}
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                strokeWidth={1.5}
                                stroke="currentColor"
                                className="w-5 h-5"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                />
                              </svg>
                            </Button>



                            {/* Set as profile photo button */}
                            <Button
                              size="sm"
                              variant="outline"
                              className="bg-white/90 text-yellow-600 border-yellow-300 hover:bg-white hover:text-yellow-700"
                              onClick={() => setPrimaryPhotoMutation.mutate(photo.id)}
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                strokeWidth={1.5}
                                stroke="currentColor"
                                className="w-5 h-5"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z"
                                />
                              </svg>
                            </Button>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}

                  {/* Add photo cell (always last after existing photos) */}
                  <div
                    className="aspect-square rounded-lg overflow-hidden flex items-center justify-center cursor-pointer bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/20 dark:to-pink-900/20 border-2 border-dashed border-purple-300 dark:border-purple-600"
                  >
                    <Button
                      variant="ghost"
                      className="w-full h-full flex flex-col items-center justify-center"
                      onClick={() => fileInputRef.current?.click()}
                    >
                      <div className="w-12 h-12 rounded-full bg-purple-500 flex items-center justify-center mb-1">
                        <span className="text-white text-2xl font-light">
                          +
                        </span>
                      </div>
                      <span className="text-xs text-purple-700 dark:text-purple-300 font-medium">
                        {translate("profile.addPhoto")}
                      </span>
                    </Button>
                    <input
                      type="file"
                      ref={fileInputRef}
                      className="hidden"
                      accept="image/jpeg,image/png,image/webp,image/gif"
                      onChange={handleFileSelect}
                    />
                  </div>
                </>
              )}
            </>
          )}
        </div>
      </div>

      {/* Interests section */}
      <div className="px-5 mb-6" id="interests-section">
        <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 mb-3 uppercase tracking-wide flex items-center">
          <BookType className="h-4 w-4 mr-2 text-pink-500" />
          MY INTERESTS
        </h3>
        
        {/* Using the new InterestsSection component with visibility toggle */}
        <InterestsSection 
          userId={user.id} 
          onToggleVisibility={toggleVisibility} 
          isVisible={fieldVisibility.interests} 
        />
      </div>

      {/* Relationship Goals */}
      <div id="relationship-goals-section" className="px-5 mb-6">
        <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 mb-3 uppercase tracking-wide flex items-center">
          <CalendarHeart className="h-4 w-4 mr-2 text-pink-500" />
          RELATIONSHIP GOALS
        </h3>

        <div className="bg-white dark:bg-gray-800 border border-pink-100 dark:border-pink-800/50 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <h3 className="text-sm font-medium text-purple-800 dark:text-purple-300 flex items-center">
              {translate("profile.whatImLookingFor")}
            </h3>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => toggleEditMode("relationshipGoal")}
                className="p-1 text-gray-400 hover:text-purple-600 transition-colors"
              >
                <Pencil size={14} />
              </button>
              <div className="flex items-center space-x-1">
                <span className="text-xs text-gray-500 dark:text-gray-400">{translate("profile.show")}</span>
                <Switch
                  checked={fieldVisibility.relationshipGoal}
                  onCheckedChange={() => toggleVisibility("relationshipGoal")}
                  className="data-[state=checked]:bg-purple-500"
                />
              </div>
            </div>
          </div>

          {editField === "relationshipGoal" ? (
            <div className="mt-2">
              <Input
                value={relationshipGoalValue}
                onChange={(e) => setRelationshipGoalValue(e.target.value)}
                placeholder={translate("profile.whatAreYouLookingFor")}
                className="text-xs border-pink-200"
              />
              <div className="mt-2 flex justify-end space-x-2">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => saveField("relationshipGoal", true)}
                  className="h-7 text-xs border-gray-300 text-gray-600 hover:bg-gray-100 flex items-center"
                >
                  <X className="h-3.5 w-3.5 mr-1 text-gray-500" />
                  {translate("profile.clear")}
                </Button>
                <Button
                  size="sm"
                  onClick={() => saveField("relationshipGoal")}
                  className="h-7 bg-purple-500 hover:bg-purple-600 text-xs"
                >
                  {translate("profile.save")}
                </Button>
              </div>
            </div>
          ) : (
            <p className="text-sm mt-1">
              {user.relationshipGoal || translate("profile.notSpecified")}
            </p>
          )}
        </div>
      </div>

    </div>
  );
}

// Add the regenerate avatar dialog component
function RegenerateAvatarDialog({
  open,
  onOpenChange,
  onConfirm,
  onCancel,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onConfirm: () => void;
  onCancel: () => void;
}) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Regenerate Avatar</DialogTitle>
          <DialogDescription>
            Would you like to regenerate your cartoon avatar with your current primary photo?
          </DialogDescription>
        </DialogHeader>
        
        <DialogFooter>
          <Button variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button onClick={onConfirm}>
            Yes, Regenerate
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
